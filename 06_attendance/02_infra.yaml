AWSTemplateFormatVersion: '2010-09-09'
Description: network for attendance application

Parameters:
  ProjectName:
    Description: project name
    Type: String
    Default: Attendance
  RepositoryName:
    Description: repository name (Only lowercase letters, numbers, and hyphen are allowed)
    Type: String
    Default: attendance
  VPCCidrBlock:
    Description: vpc cidr block
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCidrBlock1:
    Description: vpc cidr block
    Type: String
    Default: 10.0.0.0/24
  PublicSubnetCidrBlock2:
    Description: vpc cidr block
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnetCidrBlock1:
    Description: vpc cidr block
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnetCidrBlock2:
    Description: vpc cidr block
    Type: String
    Default: 10.0.3.0/24
  HealthCheckPath:
    Description: The url path for application health check
    Type: String
    Default: /attendance/stat
  ListenerPath:
    Description: The url path to access application
    Type: String
    Default: /attendance/*
  DBClusterIdentifier:
    Description: The Identifier for db cluster
    Type: String
    Default: attendance-db-cluster
  DatabaseName:
    Description: Database name
    Type: String
    Default: AttendanceDB
  BucketName:
    Description: The name for bucket who use to save static resources
    Type: String
    Default: attendance-static

Resources:
  # =====================================
  # VPC
  # =====================================
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags: 
        - Key: Name
          Value: !Sub '${ProjectName}-VPC'

  # =====================================
  # InternetGateway
  # =====================================
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # =====================================
  # サブネット(Public * 2 + Private * 2)
  # =====================================
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCidrBlock1
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub '${ProjectName}-PublicSubnet-01'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnetCidrBlock2
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: !Sub '${ProjectName}-PublicSubnet-02'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCidrBlock1
      Tags: 
        - Key: Name
          Value: !Sub '${ProjectName}-PrivateSubnet-01'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnetCidrBlock2
      Tags: 
        - Key: Name
          Value: !Sub '${ProjectName}-PrivateSubnet-02'

  # =====================================
  # ルーティングテーブル
  # =====================================
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # =====================================
  # SecurityGroup
  # =====================================
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-LoadBalancer-SG'
      GroupDescription: Security group from LoadBalancer for application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 0
          ToPort: 80
          IpProtocol: tcp

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-Container-SG'
      GroupDescription: container Security group for application
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
          IpProtocol: -1

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-DB-SG'
      GroupDescription: DB Security group for application
      VpcId: !Ref VPC 
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ContainerSecurityGroup

  # =====================================
  # ロードバランサー
  # =====================================
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${ProjectName}-ALB'
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: default
      VpcId: !Ref VPC
      Protocol: HTTP
      Port: 80

  ServerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ProjectName}-TG'
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      TargetType: ip
  
  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref LoadBalancerListener
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - !Ref ListenerPath
      Actions:
        - TargetGroupArn: !Ref ServerTargetGroup
          Type: forward

  # =====================================
  # ECSクラスタ
  # =====================================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ProjectName}-Cluster'

  # =====================================
  # ECR リポジトリ
  # =====================================
  ECR:
    Type: AWS::ECR::Repository
    Properties: 
      RepositoryName: !Ref RepositoryName

  # =====================================
  # S3 Bucket
  # =====================================
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName

  # =====================================
  # SecretsManager
  # =====================================
  RDSSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${ProjectName}-RDS-Secret'
      Description: "This is automatic generated Secrets Manager secret for an RDS DB instance"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\$`&:{}()[]+*=^-|'
  
  SecretManagerVpcEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      SecurityGroupIds:
        - !Ref ContainerSecurityGroup
        - !Ref DBSecurityGroup
      VpcEndpointType: Interface
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Principal: "*"
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource:
              - !Ref RDSSecret

  # =====================================
  # RDS周りの設定
  # =====================================
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'subnet group for rdb'
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  DBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: 'parameter group for rdb cluster'
      Family: aurora-mysql8.0
      Parameters:
        character_set_server: utf8
        character_set_client: utf8
        character_set_connection: utf8
        character_set_results: utf8
        character_set_database: utf8
        performance_schema: 1

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: 'parameter group for rdb'
      Family: aurora-mysql8.0
      Parameters:
        general_log: 0
        slow_query_log: 1
        long_query_time: 5000
        log_output: FILE

  # =====================================
  # RDS
  # =====================================
  DBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Snapshot
    Properties:
      DBSubnetGroupName: !Ref DBSubnetGroup
      Engine: aurora-mysql
      EngineVersion: 8.0.mysql_aurora.3.02.0
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
      DBClusterParameterGroupName: !Ref DBClusterParameterGroup
      BackupRetentionPeriod: 7
      DatabaseName: !Ref DatabaseName
      DBClusterIdentifier: !Ref DBClusterIdentifier
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref RDSSecret, ':SecretString:password}}' ]]
      ServerlessV2ScalingConfiguration: 
        MaxCapacity: 16
        MinCapacity: 0.5

  DBInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: instance1
      DBInstanceClass: db.serverless
      DBParameterGroupName: !Ref DBParameterGroup
      Engine: aurora-mysql
      PromotionTier: 0
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region

  DBInstance2:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceIdentifier: instance2
      DBInstanceClass: db.serverless
      DBParameterGroupName: !Ref 'DBParameterGroup'
      Engine: aurora-mysql
      PromotionTier: 1
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    DependsOn:
      - DBCluster
      - DBInstance1
      - DBInstance2
      - RDSSecret
      - SecretManagerVpcEndpoint
    Properties:
      SecretId: !Ref RDSSecret
      TargetId: !Ref DBCluster
      TargetType: AWS::RDS::DBCluster

  # =====================================
  # CloudWatch
  # =====================================
  ServerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '${ProjectName}-LOG-GP'
      RetentionInDays: 14



Outputs:
  AttendanceECSCluster:
    Description: 'AttendanceECSCluster'
    Value: !Ref ECSCluster
    Export:
      Name: AttendanceECSCluster
  AttendancePublicSubnet1:
    Description: 'AttendancePublicSubnet1'
    Value: !Ref PublicSubnet1
    Export:
      Name: AttendancePublicSubnet1
  AttendancePublicSubnet2:
    Description: 'AttendancePublicSubnet2'
    Value: !Ref PublicSubnet2
    Export:
      Name: AttendancePublicSubnet2
  ContainerSecurityGroup:
    Description: 'ContainerSecurityGroup'
    Value: !Ref ContainerSecurityGroup
    Export:
      Name: ContainerSecurityGroup
  AttendanceTargetGroup:
    Description: 'AttendanceTargetGroup'
    Value: !Ref ServerTargetGroup
    Export:
      Name: AttendanceTargetGroup
  